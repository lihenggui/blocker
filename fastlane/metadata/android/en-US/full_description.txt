Blocker is a component controller for Android applications that currently supports using PackageManager and Intent Firewall to manage the state of components. It can be seamlessly switched between these controllers, and for application rules, you can export and import them. Additionally, it is compatible with backup files generated by MyAndroidTools, and you can effortlessly convert them to Intent Firewall rules. The application also has the potential to be extended in the future.

<h3>Advantages</h3>

1. Lightweight, don't burden the system
2. Easy to use
3. Supports multiple control types

<h3>Introduction to different component controllers</h3>
<h4>Package Manager</h4>
The Android system provides a tool called PackageManager, which is used for managing installed applications or obtaining information about them. One of its methods, ```setComponentEnabledSetting(ComponentName, int, int)```, allows an application to control the state of its own components. If attempting to use this method to control components in other applications, a signature permission is required, or the call will fail.

Fortunately, Android provides another tool called "pm" that allows users to control component states in command-line mode. However, the "pm" tool requires root permission to run. The following command can be used to disable a specific package or component:

```
pm disable [PackageName/ComponmentName]
```

Whether using PackageManager in the code or "pm" in command-line mode, the configurations will be written to ```/data/system/users/0/package_restrictions.xml```.

<h4>Intent Firewall Mode</h4>
Intent Firewall was introduced in Android 4.4.2 (API 19) and is still effective in the latest Android systems. It is integrated into the Android Framework to filter the intents sent by applications or systems.

<h5>What Intent Firewall can do</h5>
Each intent sent by an application is filtered by the Intent Firewall, with rules stored in XML files. The Intent Firewall updates rules immediately if changes occur in the configuration file.

<h5>Limitations of Intent Firewall</h5>
Only system applications can read and write the directory where the configuration file is stored, and third-party applications do not have permission to access it.

<h5>Differences between Intent Firewall and Package Manager</h5>
Intent Firewall, indeed it is a firewall, it has no impact on component status. The application detects the component is on, but it just cannot start the component.

For the components disabled by PackageManager, if an application starts it, an exception will be thrown. Developers can catch this exception to know whether the component is disabled or not, so they could re-enable this component. That's the reason why the components will be enabled unexpectedly. If you are using an Intent Firewall controller, there will be no problems.

<h3>UI</h3>
The app was designed using Material 3 guidelines.
Huge thanks to our UI designer: @COPtimer (https://github.com/COPtimer)

The Screens and UI elements are built entirely using Jetpack Compose.

The app has two themes:

Dynamic color - uses colors based on the user's current color theme (if supported)

Default theme - uses predefined colors when dynamic color is not supported

Each theme also supports dark mode.